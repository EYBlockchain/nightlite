
import "hashes/sha256/1024bit.code" as sha256of1024
import "hashes/sha256/512bit.code" as sha256of512
import "utils/pack/unpack128.code" as unpack128
import "utils/pack/nonStrictUnpack256.code" as unpack256

def concatenate256x128x256x256(field[256] a, field[128] b, field[256] c, field[256] d)->(field[896]):
	return [...a, ...b, ...c, ...d]

def concatenate256x128x256(field[256] a, field[128] b, field[256] c)->(field[640]):
	return [...a, ...b, ...c]

def shaPad896To1024(field[896] a)->(field[1024]):
	return [...a, 1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0]

def shaPad640To1024(field[640] a)->(field[1024]):
	return [...a


// unpack a field[2] (assumed to be two 128-bit values) into 256 bits
def unpack2xx128To256(field[2] input)->(field[256]):
	field[128] left = unpack128(input[0])
	field[128] right = unpack128(input[1])
  field[256] output = [...left, ...right]
  return output

// Inputs for main are:
// - contractAddress - Contract address of the ERC721 token, left padded so that it's 66 characters (0x + 000... + address)
// - value (public) is the 128 bit coin value
// - publicKey (private) is the public key of the commitment derived by hashing the Secret Key Sk of the commitment. IT IS KEPT PRIVATE FOR ZK!!!
// - salt (private) is the salt for the commitment
// - commitment (public) is the commitment

def main(field publicInputHash, private field contractAddress, private field value, private field[2]  publicKey, private field[2] salt, private field[2] commitment)->():

	// Unpack the inputs of main() to 128 bits. We'll unpack each field to its own 128 bit string for simplicity for now. The unpacked binary string is in big endian format, left-padded with 0's. (NOTE: THIS METHOD OF PADDING IS DIFFERENT FROM THE PADDING REQUIRED FOR SHA256 - i.e. unpack128() padding is very different from that produced by shaPad64To512())
	// unpack128 unpacks a field element to 128 field elements.
	// The coin value is only 128 bits - no one will want more money than that.

	field[256] publicInputHashBits = unpack256(publicInputHash)
	field[256] contractAddressBits = unpack256(contractAddress)
	field[128] valueBits = unpack128(value)
	field[256] saltBits = unpack2xx128To256(salt)
	field[256] publicKeyBits = unpack2xx128To256(publicKey)
	field[256] commitmentBits = unpack2xx128To256(commitment)


	// Compute commitment = H(contractAddress|value|publicKey|salt):

	field[896] commitmentPreImage = concatenate256x128x256x256(contractAddressBits, valueBits, publicKeyBits, saltBits)
	field[1024] commitmentPreImagePadded = shaPad896To1024(commitmentPreImage)
	field[256] commitmentBitsCheck = sha256of1024(commitmentPreImagePadded[0..256], commitmentPreImagePadded[256..512], commitmentPreImagePadded[512..768], commitmentPreImagePadded[768..1024])

	// This checks if the commitmentBitsCheck we computed using the 'value' (which is hash(value|publicKey|salt)) is equal to the input commitment:
	commitmentBits == commitmentBitsCheck


	// Check that the 'public inputs' hash to the publicInputHash:
	field[640] publicInputPreImage = concatenate256x128x256(contractAddressBits, valueBits, commitmentBits)
	field[1024] publicInputPadded = shaPad640To1024(publicInputPreImage)

	field[256] publicInputHashBitsCheck = sha256of1024(publicInputPadded[0..256], publicInputPadded[256..512], publicInputPadded[512..768], publicInputPadded[768..1024])

	publicInputHashBits[8..256] == publicInputHashBitsCheck[8..256]


	return
